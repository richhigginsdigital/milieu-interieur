### Type definitions saved at 2021-07-28T12:44:00.045Z ###

type File implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  blksize: Int
  blocks: Int
}

type Directory implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  blksize: Int
  blocks: Int
}

type Site implements Node @derivedTypes @dontInfer {
  buildTime: Date @dateformat
  siteMetadata: SiteSiteMetadata
  port: Int
  host: String
  flags: SiteFlags
  polyfill: Boolean
  pathPrefix: String
}

type SiteSiteMetadata {
  title: String
  description: String
  author: String
}

type SiteFlags {
  FAST_REFRESH: Boolean
}

type SiteFunction implements Node @dontInfer {
  functionRoute: String!
  pluginName: String!
  originalAbsoluteFilePath: String!
  originalRelativeFilePath: String!
  relativeCompiledFilePath: String!
  absoluteCompiledFilePath: String!
  matchPath: String
}

type SitePage implements Node @dontInfer {
  path: String!
  component: String!
  internalComponentName: String!
  componentChunkName: String!
  matchPath: String
}

enum ImageFormat {
  NO_CHANGE
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum ImageFit {
  COVER
  CONTAIN
  FILL
  INSIDE
  OUTSIDE
}

enum ImageLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum ImageCropFocus {
  CENTER
  NORTH
  NORTHEAST
  EAST
  SOUTHEAST
  SOUTH
  SOUTHWEST
  WEST
  NORTHWEST
  ENTROPY
  ATTENTION
}

input DuotoneGradient {
  highlight: String!
  shadow: String!
  opacity: Int
}

enum PotraceTurnPolicy {
  TURNPOLICY_BLACK
  TURNPOLICY_WHITE
  TURNPOLICY_LEFT
  TURNPOLICY_RIGHT
  TURNPOLICY_MINORITY
  TURNPOLICY_MAJORITY
}

input Potrace {
  turnPolicy: PotraceTurnPolicy
  turdSize: Float
  alphaMax: Float
  optCurve: Boolean
  optTolerance: Float
  threshold: Int
  blackOnWhite: Boolean
  color: String
  background: String
}

type ImageSharpFixed {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  width: Float!
  height: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  originalName: String
}

type ImageSharpFluid {
  base64: String
  tracedSVG: String
  aspectRatio: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  sizes: String!
  originalImg: String
  originalName: String
  presentationWidth: Int!
  presentationHeight: Int!
}

enum ImagePlaceholder {
  DOMINANT_COLOR
  TRACED_SVG
  BLURRED
  NONE
}

input BlurredOptions {
  """Width of the generated low-res preview. Default is 20px"""
  width: Int

  """
  Force the output format for the low-res preview. Default is to use the same
  format as the input. You should rarely need to change this
  """
  toFormat: ImageFormat
}

input JPGOptions {
  quality: Int
  progressive: Boolean = true
}

input PNGOptions {
  quality: Int
  compressionSpeed: Int = 4
}

input WebPOptions {
  quality: Int
}

input AVIFOptions {
  quality: Int
  lossless: Boolean
  speed: Int
}

input TransformOptions {
  grayscale: Boolean = false
  duotone: DuotoneGradient
  rotate: Int = 0
  trim: Float = 0
  cropFocus: ImageCropFocus = ATTENTION
  fit: ImageFit = COVER
}

type ImageSharpOriginal {
  width: Float
  height: Float
  src: String
}

type ImageSharpResize {
  src: String
  tracedSVG: String
  width: Int
  height: Int
  aspectRatio: Float
  originalName: String
}

type ImageSharp implements Node @childOf(types: ["File"]) @dontInfer {
  fixed(width: Int, height: Int, base64Width: Int, jpegProgressive: Boolean = true, pngCompressionSpeed: Int = 4, grayscale: Boolean = false, duotone: DuotoneGradient, traceSVG: Potrace, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, toFormat: ImageFormat = AUTO, toFormatBase64: ImageFormat = AUTO, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int = 0, trim: Float = 0): ImageSharpFixed
  fluid(
    maxWidth: Int
    maxHeight: Int
    base64Width: Int
    grayscale: Boolean = false
    jpegProgressive: Boolean = true
    pngCompressionSpeed: Int = 4
    duotone: DuotoneGradient
    traceSVG: Potrace
    quality: Int
    jpegQuality: Int
    pngQuality: Int
    webpQuality: Int
    toFormat: ImageFormat = AUTO
    toFormatBase64: ImageFormat = AUTO
    cropFocus: ImageCropFocus = ATTENTION
    fit: ImageFit = COVER
    background: String = "rgba(0,0,0,1)"
    rotate: Int = 0
    trim: Float = 0
    sizes: String = ""

    """
    A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
    """
    srcSetBreakpoints: [Int] = []
  ): ImageSharpFluid
  gatsbyImageData(
    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if
    it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: ImageLayout = CONSTRAINED

    """
    The display width of the generated image for layout = FIXED, and the maximum
    display width of the largest image for layout = CONSTRAINED.
    Ignored if layout = FLUID.
    """
    width: Int

    """
    The display height of the generated image for layout = FIXED, and the
    maximum display height of the largest image for layout = CONSTRAINED.
    The image will be cropped if the aspect ratio does not match the source
    image. If omitted, it is calculated from the supplied width,
    matching the aspect ratio of the source image.
    """
    height: Int

    """
    If set along with width or height, this will set the value of the other
    dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    TRACED_SVG: a low-resolution traced SVG of the image.
    NONE: no placeholder. Set "background" to use a fixed background color.
    """
    placeholder: ImagePlaceholder

    """
    Options for the low-resolution placeholder image. Set placeholder to "BLURRED" to use this
    """
    blurredOptions: BlurredOptions

    """
    Options for traced placeholder SVGs. You also should set placeholder to "TRACED_SVG".
    """
    tracedSVGOptions: Potrace

    """
    The image formats to generate. Valid values are "AUTO" (meaning the same
    format as the source image), "JPG", "PNG", "WEBP" and "AVIF".
    The default value is [AUTO, WEBP], and you should rarely need to change
    this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted
    results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    formats: [ImageFormat]

    """
    A list of image pixel densities to generate. It will never generate images
    larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for FIXED images, meaning 1x and 2x and [0.25, 0.5, 1,
    2] for CONSTRAINED. In this case, an image with a constrained layout
    and width = 400 would generate images at 100, 200, 400 and 800px wide.
    Ignored for FULL_WIDTH images, which use breakpoints instead
    """
    outputPixelDensities: [Float]

    """
    Specifies the image widths to generate. For FIXED and CONSTRAINED images it
    is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override
    the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download.
    You should usually leave this blank, and a suitable value will be calculated. The exception is if a FULL_WIDTH image
    does not actually span the full width of the screen, in which case you should pass the correct size here.
    """
    sizes: String

    """The default quality. This is overridden by any format-specific options"""
    quality: Int

    """Options to pass to sharp when generating JPG images."""
    jpgOptions: JPGOptions

    """Options to pass to sharp when generating PNG images."""
    pngOptions: PNGOptions

    """Options to pass to sharp when generating WebP images."""
    webpOptions: WebPOptions

    """Options to pass to sharp when generating AVIF images."""
    avifOptions: AVIFOptions

    """
    Options to pass to sharp to control cropping and other image manipulations.
    """
    transformOptions: TransformOptions

    """
    Background color applied to the wrapper. Also passed to sharp to use as a
    background when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String
  ): JSON!
  original: ImageSharpOriginal
  resize(width: Int, height: Int, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, jpegProgressive: Boolean = true, pngCompressionLevel: Int = 9, pngCompressionSpeed: Int = 4, grayscale: Boolean = false, duotone: DuotoneGradient, base64: Boolean = false, traceSVG: Potrace, toFormat: ImageFormat = AUTO, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int = 0, trim: Float = 0): ImageSharpResize
}

interface ContentfulEntry implements Node {
  contentful_id: String!
  id: ID!
  node_locale: String!
}

interface ContentfulReference {
  contentful_id: String!
  id: ID!
}

type ContentfulAsset implements ContentfulReference & Node @derivedTypes @dontInfer {
  contentful_id: String!
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  file: ContentfulAssetFile
  title: String
  description: String
  node_locale: String
  sys: ContentfulAssetSys
}

type ContentfulAssetFile @derivedTypes {
  url: String
  details: ContentfulAssetFileDetails
  fileName: String
  contentType: String
}

type ContentfulAssetFileDetails @derivedTypes {
  size: Int
  image: ContentfulAssetFileDetailsImage
}

type ContentfulAssetFileDetailsImage {
  width: Int
  height: Int
}

type ContentfulAssetSys {
  type: String
  revision: Int
}

type ContentfulPage implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  title: String
  slug: String
  mainContent: ContentfulPageMainContent
  menuOrder: Int
  parentPage: ContentfulPage @link(by: "id", from: "parentPage___NODE")
  metaDescription: contentfulPageMetaDescriptionTextNode @link(by: "id", from: "metaDescription___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulPageSys
  page: [ContentfulPage] @link(by: "id", from: "page___NODE")
  menu: [ContentfulMenu] @link(by: "id", from: "menu___NODE")
}

type ContentfulPageMainContent {
  raw: String
  references: [ContentfulAssetContentfulGridImageAndTextContentfulHeroImageContentfulHighlightTextContentfulPageUnion] @link(by: "id", from: "references___NODE")
}

union ContentfulAssetContentfulGridImageAndTextContentfulHeroImageContentfulHighlightTextContentfulPageUnion = ContentfulAsset | ContentfulGridImageAndText | ContentfulHeroImage | ContentfulHighlightText | ContentfulPage

type contentfulPageMetaDescriptionTextNode implements Node @derivedTypes @childOf(types: ["ContentfulPage"]) @dontInfer {
  metaDescription: String
  sys: contentfulPageMetaDescriptionTextNodeSys
}

type contentfulPageMetaDescriptionTextNodeSys {
  type: String
}

type ContentfulPageSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulPageSysContentType
}

type ContentfulPageSysContentType @derivedTypes {
  sys: ContentfulPageSysContentTypeSys
}

type ContentfulPageSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulMenu implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  title: String
  pages: [ContentfulPage] @link(by: "id", from: "pages___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulMenuSys
}

type ContentfulMenuSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulMenuSysContentType
}

type ContentfulMenuSysContentType @derivedTypes {
  sys: ContentfulMenuSysContentTypeSys
}

type ContentfulMenuSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulEvent implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  title: String
  slug: String
  date: Date @dateformat
  location: String
  category: String
  mainContent: ContentfulEventMainContent
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulEventSys
  metaDescription: contentfulEventMetaDescriptionTextNode @link(by: "id", from: "metaDescription___NODE")
}

type ContentfulEventMainContent {
  raw: String
  references: [ContentfulAssetContentfulPageUnion] @link(by: "id", from: "references___NODE")
}

union ContentfulAssetContentfulPageUnion = ContentfulAsset | ContentfulPage

type ContentfulEventSys @derivedTypes {
  type: String
  contentType: ContentfulEventSysContentType
  revision: Int
}

type ContentfulEventSysContentType @derivedTypes {
  sys: ContentfulEventSysContentTypeSys
}

type ContentfulEventSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type contentfulEventMetaDescriptionTextNode implements Node @derivedTypes @childOf(types: ["ContentfulEvent"]) @dontInfer {
  metaDescription: String
  sys: contentfulEventMetaDescriptionTextNodeSys
}

type contentfulEventMetaDescriptionTextNodeSys {
  type: String
}

type ContentfulPublication implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  title: String
  slug: String
  date: Date @dateformat
  category: String
  link: String
  authors: ContentfulPublicationAuthors
  journal: String
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulPublicationSys
  dateAndPage: contentfulPublicationDateAndPageTextNode @link(by: "id", from: "dateAndPage___NODE")
  metaDescription: contentfulPublicationMetaDescriptionTextNode @link(by: "id", from: "metaDescription___NODE")
}

type ContentfulPublicationAuthors {
  raw: String
}

type ContentfulPublicationSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulPublicationSysContentType
}

type ContentfulPublicationSysContentType @derivedTypes {
  sys: ContentfulPublicationSysContentTypeSys
}

type ContentfulPublicationSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type contentfulPublicationDateAndPageTextNode implements Node @derivedTypes @childOf(types: ["ContentfulPublication"]) @dontInfer {
  dateAndPage: String
  sys: contentfulPublicationDateAndPageTextNodeSys
}

type contentfulPublicationDateAndPageTextNodeSys {
  type: String
}

type contentfulPublicationMetaDescriptionTextNode implements Node @derivedTypes @childOf(types: ["ContentfulPublication"]) @dontInfer {
  metaDescription: String
  sys: contentfulPublicationMetaDescriptionTextNodeSys
}

type contentfulPublicationMetaDescriptionTextNodeSys {
  type: String
}

type ContentfulHomepage implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  title: String
  videoUrl: String
  consortiumLogos: [ContentfulAsset] @link(by: "id", from: "consortiumLogos___NODE")
  fundingAgencyLogos: [ContentfulAsset] @link(by: "id", from: "fundingAgencyLogos___NODE")
  consortiumLinks: [ContentfulLinkedImage] @link(by: "id", from: "consortiumLinks___NODE")
  missionStatement: contentfulHomepageMissionStatementTextNode @link(by: "id", from: "missionStatement___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulHomepageSys
}

type ContentfulLinkedImage implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  title: String
  image: ContentfulAsset @link(by: "id", from: "image___NODE")
  homepage: [ContentfulHomepage] @link(by: "id", from: "homepage___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulLinkedImageSys
  url: String
}

type ContentfulLinkedImageSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulLinkedImageSysContentType
}

type ContentfulLinkedImageSysContentType @derivedTypes {
  sys: ContentfulLinkedImageSysContentTypeSys
}

type ContentfulLinkedImageSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type contentfulHomepageMissionStatementTextNode implements Node @derivedTypes @childOf(types: ["ContentfulHomepage"]) @dontInfer {
  missionStatement: String
  sys: contentfulHomepageMissionStatementTextNodeSys
}

type contentfulHomepageMissionStatementTextNodeSys {
  type: String
}

type ContentfulHomepageSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulHomepageSysContentType
}

type ContentfulHomepageSysContentType @derivedTypes {
  sys: ContentfulHomepageSysContentTypeSys
}

type ContentfulHomepageSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulHighlightText implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  title: String
  text: ContentfulHighlightTextText
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulHighlightTextSys
}

type ContentfulHighlightTextText {
  raw: String
  references: [ContentfulPage] @link(by: "id", from: "references___NODE")
}

type ContentfulHighlightTextSys @derivedTypes {
  type: String
  contentType: ContentfulHighlightTextSysContentType
  revision: Int
}

type ContentfulHighlightTextSysContentType @derivedTypes {
  sys: ContentfulHighlightTextSysContentTypeSys
}

type ContentfulHighlightTextSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulHeroImage implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  image: ContentfulAsset @link(by: "id", from: "image___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulHeroImageSys
  title: String
}

type ContentfulHeroImageSys @derivedTypes {
  type: String
  contentType: ContentfulHeroImageSysContentType
  revision: Int
}

type ContentfulHeroImageSysContentType @derivedTypes {
  sys: ContentfulHeroImageSysContentTypeSys
}

type ContentfulHeroImageSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulGridImageAndText implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  title: String
  text: ContentfulGridImageAndTextText
  image: ContentfulAsset @link(by: "id", from: "image___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulGridImageAndTextSys
}

type ContentfulGridImageAndTextText {
  raw: String
  references: [ContentfulPage] @link(by: "id", from: "references___NODE")
}

type ContentfulGridImageAndTextSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulGridImageAndTextSysContentType
}

type ContentfulGridImageAndTextSysContentType @derivedTypes {
  sys: ContentfulGridImageAndTextSysContentTypeSys
}

type ContentfulGridImageAndTextSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulNews implements ContentfulReference & ContentfulEntry & Node @derivedTypes @dontInfer {
  contentful_id: String!
  node_locale: String!
  title: String
  slug: String
  date: Date @dateformat
  cardText: ContentfulNewsCardText
  mainContent: ContentfulNewsMainContent
  image: ContentfulAsset @link(by: "id", from: "image___NODE")
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulNewsSys
}

type ContentfulNewsCardText {
  raw: String
}

type ContentfulNewsMainContent {
  raw: String
  references: [ContentfulHeroImage] @link(by: "id", from: "references___NODE")
}

type ContentfulNewsSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulNewsSysContentType
}

type ContentfulNewsSysContentType @derivedTypes {
  sys: ContentfulNewsSysContentTypeSys
}

type ContentfulNewsSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type ContentfulContentType implements Node @derivedTypes @dontInfer {
  name: String
  displayField: String
  description: String
  sys: ContentfulContentTypeSys
}

type ContentfulContentTypeSys {
  type: String
}